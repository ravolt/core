#!/bin/bash

export 'PS4=${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '

set -e
# Check that we are in the root of the opencrowbar checkout tree
if [[ $0 = /* ]]; then
    OCBDIR="$0"
elif [[ $0 = .*  || $0 = */* ]]; then
    OCBDIR="$PWD/$0"
else
    echo "Cannot figure out where we are!"
    exit 1
fi

OCBDIR="$(readlink -f "$OCBDIR")"
export OCBDIR="${OCBDIR%/core/tools/kvm-admin}"

while [[ $1 ]]; do
    case $1 in
        --save-image)
            save_image=true
            image_name=$(readlink -f "$2")
            if [[ ! $image_name ]]; then
                echo "Will not be able to save disk image to $2, directory ${2%/*} does not exist."
                exit 1
            elif [[ ! -w ${image_name%/*} ]]; then
                echo "Will not be able to save disk image to $2, directory ${2%/*} is not writable."
                exit 1
            elif [[ -f $image_name && ! -w $image_name ]]; then
                echo "Will not be able to save disk image to $2, that file is not writable."
                exit 1
            fi
            shift 2;;
        --use-image)
            use_image=true
            image_name=$(readlink -f "$2")
            if ! [[ $image_name && -w $image_name ]]; then
                echo "Cannot write to $image_name, will not be able to use it."
                exit 1
            fi
            shift 2;;
        --demo)
            use_image=true
            image_name=$(readlink -f "$2")
            if ! [[ $image_name && -f $image_name ]]; then
                echo "Disk image $image_name does not exist, will not be able to use it."
                exit 1
            fi
            ephemeral_admin=true
            shift 2;;
        --autoinstall)
            autoinstall=true
            hostname="$ADMIN_HOSTNANE"
            shift;;
        *)
            echo "Invalid options: ${*}"
            echo "Please try one of:"
            echo "   --save-image <file> to save the admin disk image after kvm-admin is killed,"
            echo "   --demo <file> to run a previosly-saved image discarding changes,"
            echo "   --use-image <file> to run a previously-saved image keeping changes"
            exit 1;;
    esac
done

admin_server_loc="$HOME/.cache/opencrowbar/tftpboot/centos-6.6"
admin_server_iso="$HOME/.cache/opencrowbar/tftpboot/isos/CentOS-6.6-x86_64-bin-DVD1.iso"
. "$OCBDIR/core/tools/kvm_lib.sh"
TMPDIR=$(mktemp -d /tmp/ocb-kvm-admin-XXXXXX)

myclean() {
    set +e
    rm -rf "$TMPDIR"
    sudo iptables -t nat -D POSTROUTING -s 192.168.124.0/24 \! -d 192.168.124.0/24 -j MASQUERADE
    if [[ $save_image = true ]]; then
        kill_vm killed
        echo "Saving the disk image to $image_name.  Please do not interrupt!"
        qemu-img convert -c -p -f raw -O qcow2 "$VM_DIR/$VMID.disk" "$image_name"
    fi
    cleanup
    kill_ocb_bridge
}

trap 'myclean' 0 INT QUIT TERM

if [[ ! $use_image = true ]]; then
    # Inject opencrowbar packages and kickstart into the PXE install ISO.
    mkdir -p "$TMPDIR/initrd"
    tar -C "$OCBDIR" -czf "$TMPDIR/initrd/ocb.tar.gz" .
    cat >"$TMPDIR/initrd/opencrowbar.ks" <<'EOF'
# Opencrowbar Admin Development Kickstart
install
cdrom
key --skip
lang en_US.UTF-8
keyboard us
text
# crowbar
rootpw --iscrypted $1$H6F/NLec$Fps2Ut0zY4MjJtsa1O2yk0
firewall --disabled
authconfig --enableshadow --enablemd5
timezone --utc UTC
bootloader --location=mbr --driveorder=sda
zerombr
ignoredisk --only-use=sda
clearpart --all --drives=sda
part /boot --fstype ext4 --size=100 --ondisk=sda
part pv.6 --size=1 --grow --ondisk=sda
volgroup ocb_admin --pesize=32768 pv.6
logvol / --fstype ext4 --name=root --vgname=ocb_admin --size=1 --grow
logvol swap --size=4096 --name=swap --vgname=ocb_admin
reboot

%packages --nobase
@core
vim-enhanced
keyutils
trousers
fipscheck
device-mapper-multipath
emacs-nox
openssh
createrepo
tcpdump
screen
policycoreutils-python

%post --nochroot
export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
exec > /mnt/sysimage/root/post-install.log 2>&1
set -x
mkdir -p /mnt/sysimage/opt/opencrowbar
tar -C /mnt/sysimage/opt/opencrowbar -xzf /ocb.tar.gz
mkdir -p /mnt/sysimage/tftpboot/centos-6.6/install
cp -a /mnt/source/. /mnt/sysimage/tftpboot/centos-6.6/install/.

%post
export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
exec > /root/post-install.log 2>&1
set -x
authkey_re='crowbar\.authkey=([^ ]+)'
if [[ $(cat /proc/cmdline) =~ $authkey_re ]]; then
    mkdir -p "/root/.ssh"
    printf '%b\n'  "${BASH_REMATCH[1]}" >> "/root/.ssh/authorized_keys"
    restorecon -Rv /root/.ssh
fi
mkdir -p /etc/profile.d
for proxy in http_proxy https_proxy no_proxy; do
    match_re="crowbar\.$proxy=([^ ]+)"
    [[ $(cat /proc/cmdline) =~ $match_re ]] || continue
    printf 'export %s="%b"\n' "$proxy" "${BASH_REMATCH[1]}" >> /etc/profile.d/proxy.sh
    printf '%s=%b\n' "$proxy" "${BASH_REMATCH[1]}" >> /etc/environment
done

cat <<'EOQ' >/etc/ssh/sshd_config
Port 22
ListenAddress ::
ListenAddress 0.0.0.0
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
UsePrivilegeSeparation yes
KeyRegenerationInterval 3600
ServerKeyBits 768
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 120
PermitRootLogin without-password
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
TCPKeepAlive yes
AcceptEnv LANG LC_*
AcceptEnv http_proxy https_proxy no_proxy
Subsystem sftp /usr/lib/openssh/sftp-server
UsePAM no
UseDNS no
EOQ

cat <<EOQ >/etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
BOOTPROTO=none
ONBOOT=yes
NETMASK=255.255.255.0
IPADDR=192.168.124.10
GATEWAY=192.168.124.1
TYPE=Ethernet
EOQ

cat <<EOQ > /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
EOQ

EOF
    cp "$admin_server_loc/install/images/pxeboot/initrd.img" "$TMPDIR"
    chmod 644 "$TMPDIR/initrd.img" 
    (cd "$TMPDIR/initrd"; find . -depth  |cpio --create --format=newc |gzip -9 >>"$TMPDIR/initrd.img")
    install_params=("ksdevice=eth0"
                    "ks=file:/opencrowbar.ks"
                    "ip=192.168.124.10"
                    "netmask=255.255.255.0 nofb"
                    "text")
    install_params+=("crowbar.authkey=$(sed 's/ /\\040/g' <"$HOME/.ssh/id_rsa.pub")")
    . "$OCBDIR/core/tools/proxy_lib.sh"
    mangle_proxies "${OCB_BRIDGE_IP%/*}"
    for proxy in "${!mangled_proxies[@]}"; do
        install_params+=("crowbar.$proxy=${mangled_proxies[$proxy]}")
    done
fi

make_ocb_bridge
if [[ ! $use_image = true ]]; then
    qemu-img create -f raw "$VM_DIR/$VMID.disk" 30G &>/dev/null
fi
makenics
# Let the admin node talk to the outside world.
sudo iptables -t nat -A POSTROUTING -s 192.168.124.0/24 \! -d 192.168.124.0/24 -j MASQUERADE

if [[ ! $use_image = true ]]; then
    # Kick off the installer
    run_kvm -kernel "$admin_server_loc/install/images/pxeboot/vmlinuz" \
            -initrd "$TMPDIR/initrd.img" \
            -append "${install_params[*]}" \
            -cdrom "$admin_server_iso"
fi

# Once we get here, the OS should be installed.
admin_args=(-bootc)
if [[ $use_image = true ]]; then
    admin_args+=(-disk "$image_name")
fi
if [[ $ephemeral_admin = true ]]; then
    admin_args+=(-snapshot -reboot)
fi
while [[ ! -f $VM_DIR/$VMID.killed ]]; do
    update_vm_status "Booting node to disk"
    if run_kvm "${admin_args[@]}" -daemonif "ping -q -c 1 -t 5 192.168.124.10"; then
        while ! ssh root@192.168.124.10 true; do
            sleep 5
        done
        ssh -f root@192.168.124.10 -- screen -d -m -S ocb-install -t 'Shell'
        ssh -f root@192.168.124.10 -- "screen -X caption always '%{-b ..}%-w%{+b ..}[[%n%f*%t]]%{-}%+w'"
        if [[ $autoinstall = true ]]; then
            ssh root@192.168.124.10 -- screen -S ocb-install -X \
                screen -t 'Install' "/opt/opencrowbar/core/production.sh $ADMIN_HOSTNAME"
        fi
        ssh -t root@192.168.124.10 -- screen -r -S ocb-install
        kill_vm exited
    else
        update_vm_status "Node failed to deploy."
        save_image=''
        kill_vm killed
    fi
done
